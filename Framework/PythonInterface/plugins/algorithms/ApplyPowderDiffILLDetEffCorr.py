from __future__ import print_function

from mantid.simpleapi import CreateWorkspace, DeleteWorkspace, RenameWorkspace, Transpose
from mantid.api import AlgorithmFactory, PropertyMode, PythonAlgorithm, WorkspaceProperty
from mantid.kernel import Direction
import numpy as np


class ApplyPowderDiffILLDetEffCorr(PythonAlgorithm):

    def category(self):
        return 'Diffraction\\Utility'

    def name(self):
        return 'ApplyPowderDiffILLDetEffCorr'

    def summary(self):
        return 'Applies the calibration workspace generated by PowderDiffILLDetEffCorr to data loaded with LoadILLDiffraction.'

    def PyInit(self):
        self.declareProperty(WorkspaceProperty("InputWorkspace", "",
                                               optional=PropertyMode.Mandatory,
                                               direction=Direction.Input),
                             "The workspace for the detector efficiency correction to be applied to.")
        self.declareProperty(WorkspaceProperty("DetectorEfficiencyWorkspace", "",
                                               optional=PropertyMode.Mandatory,
                                               direction=Direction.Input),
                             "The workspace containing the detector efficiency correction factors generated by PowderDiffILLDetEffCorr.")
        self.declareProperty(WorkspaceProperty("OutputWorkspace", "",
                                               optional=PropertyMode.Mandatory,
                                               direction=Direction.Output),
                             "The output workspace with the calibrated data. Optionally can be the same as the input workspace.")

    def PyExec(self):
        input_ws = self.getProperty("InputWorkspace").value
        efficiency_workspace = self.getProperty("DetectorEfficiencyWorkspace").value

        y_values = input_ws.extractY()
        y_values = y_values.reshape(y_values.size)

        efficiency_values = efficiency_workspace.extractY()
        efficiency_values = efficiency_values.reshape(efficiency_values.size)

        efficiency_values = np.insert(efficiency_values, 0, 1) # add the monitor efficiency

        if (y_values.size % efficiency_values.size) is not 0:
            raise ValueError('Number of entries in input workspace is not a multiple of number of efficiencies in detector efficiency '
                             'workspace.')
        number_time_indexes = y_values.size / efficiency_values.size

        full_efficiency_values = np.repeat(efficiency_values, number_time_indexes)

        __temp_ws = CreateWorkspace(input_ws.extractX(), full_efficiency_values)
        __temp_ws = Transpose(__temp_ws)
        output_ws = input_ws * __temp_ws

        RenameWorkspace(output_ws, self.getPropertyValue("OutputWorkspace"))
        self.setProperty("OutputWorkspace", output_ws)

        DeleteWorkspace(__temp_ws)

AlgorithmFactory.subscribe(ApplyPowderDiffILLDetEffCorr)
