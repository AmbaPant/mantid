./MDAlgorithms/test/FitMDTest.h:47:  uint16_t getInnerRunIndex(size_t) const override { return 0; }
./MDAlgorithms/test/LoadSQW2Test.h:300:          auto irun = iter->getInnerRunIndex(i);
./MDAlgorithms/test/ConvertSpiceDataToRealSpaceTest.h:159:    uint16_t run0 = mditer->getInnerRunIndex(0);
./MDAlgorithms/test/ConvertSpiceDataToRealSpaceTest.h:161:    uint16_t run1 = mditer->getInnerRunIndex(44);
./MDAlgorithms/test/ConvertSpiceDataToRealSpaceTest.h:163:    uint16_t runLast = mditer->getInnerRunIndex(44 * 61 - 1);
./MDAlgorithms/test/ConvertSpiceDataToRealSpaceTest.h:341:    uint16_t run0 = mditer->getInnerRunIndex(0);
./MDAlgorithms/test/ConvertSpiceDataToRealSpaceTest.h:343:    uint16_t run1 = mditer->getInnerRunIndex(44);
./MDAlgorithms/test/ConvertSpiceDataToRealSpaceTest.h:345:    uint16_t runLast = mditer->getInnerRunIndex(44 * 61 - 1);
./MDAlgorithms/src/ConvToMDBase.cpp:52:  m_RunIndex = WSD.getPropertyValueAsType<uint16_t>("RUN_INDEX");
./MDAlgorithms/src/ConvToMDBase.cpp:105:      m_RunIndex(0),        // defauld run index is 0
./MDAlgorithms/src/GetSpiceDataRawCountsFromMD.cpp:373:      int thisrunnumber = mditer->getInnerRunIndex(iev);
./MDAlgorithms/src/ConvToMDEventsWS.cpp:26:  uint16_t expInfoIndexLoc = m_RunIndex;
./MDAlgorithms/src/ConvToMDHistoWS.cpp:129:      run_index[nBufEvents] = m_RunIndex;
./MDAlgorithms/src/FindPeaksMD.cpp:550:                return event.getRunIndex() == iexp || event.getRunIndex() >= numExperimentInfo;
./MDAlgorithms/src/FindPeaksMD.cpp:563:            if (event.getRunIndex() == iexp) {
./MDAlgorithms/src/MergeMD.cpp:180:  newEvent.setRunIndex(static_cast<uint16_t>(srcEvent.getRunIndex() + expInfoIndexOffset));
./MDAlgorithms/src/FitMD.cpp:218:      mdWS->addEvent(MDEvent<4>(signal, errorSq, inputIter->getInnerRunIndex(i), inputIter->getInnerGoniometerIndex(i),
./MDAlgorithms/src/IntegratePeaksCWSD.cpp:227:      uint16_t run_number = mditer->getInnerRunIndex(iev);
./MDAlgorithms/src/LoadDNSSCD.cpp:504:    uint16_t runindex = 0;
./MDAlgorithms/src/LoadDNSSCD.cpp:554:                                     static_cast<uint16_t>(runindex), 0, detid, millerindex.data());
./MDAlgorithms/src/LoadDNSSCD.cpp:557:                                          static_cast<uint16_t>(runindex), 0, detid, millerindex.data());
./MDAlgorithms/src/LoadDNSSCD.cpp:657:    uint16_t runindex = 0;
./MDAlgorithms/src/LoadDNSSCD.cpp:697:                                   static_cast<uint16_t>(runindex), 0, detid, datapoint.data());
./MDAlgorithms/src/LoadDNSSCD.cpp:700:                                        static_cast<uint16_t>(runindex), 0, detid, datapoint.data());
./MDAlgorithms/src/FlippingRatioCorrectionMD.cpp:172:        const auto ind = static_cast<size_t>(event.getRunIndex());
./MDAlgorithms/src/SliceMD.cpp:90:  newEvent.setRunIndex(srcEvent.getRunIndex());
./MDAlgorithms/src/ConvertToMDMinMaxLocal.cpp:84:  // add runindex to the target workspace description for further usage as the
./MDAlgorithms/src/ConvertCWPDMDToSpectra.cpp:415:  int currRunIndex = -1;
./MDAlgorithms/src/ConvertCWPDMDToSpectra.cpp:441:      auto temprun = static_cast<int>(mditer->getInnerRunIndex(iev));
./MDAlgorithms/src/ConvertCWPDMDToSpectra.cpp:446:        if (temprun != currRunIndex) {
./MDAlgorithms/src/ConvertCWPDMDToSpectra.cpp:498:        uint16_t runid = mditer->getInnerRunIndex(iev);
./MDAlgorithms/src/ConvertCWPDMDToSpectra.cpp:507:        uint16_t runid = mditer->getInnerRunIndex(iev);
./MDAlgorithms/inc/MantidMDAlgorithms/ConvToMDEventsWSIndexing.h:109:    uint16_t expInfoIndexLoc = m_RunIndex;
./MDAlgorithms/inc/MantidMDAlgorithms/ConvToMDBase.h:67:  uint16_t m_RunIndex;
./API/src/MatrixWorkspaceMDIterator.cpp:233:uint16_t MatrixWorkspaceMDIterator::getInnerRunIndex(size_t /*index*/) const { return 0; }
./API/inc/MantidAPI/IMDIterator.h:91:  virtual uint16_t getInnerRunIndex(size_t index) const = 0;
./API/inc/MantidAPI/IMDNode.h:227:  virtual void calculateCentroid(coord_t * /*centroid*/, const int /*runindex*/) const = 0;
./API/inc/MantidAPI/MatrixWorkspaceMDIterator.h:55:  uint16_t getInnerRunIndex(size_t index) const override;
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:488:        for (samRunIndex, sam_ws_name) in enumerate(samwksplist):
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:508:            can_run_ws_name, _ = self._generate_container_run_name(can_run_numbers, samRunIndex)
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:521:                                                           samRunIndex,
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:532:                van_run_ws_name = self._process_vanadium_runs(van_run_number_list, samRunIndex)
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:1309:    def _generate_container_run_name(self, can_run_numbers, samRunIndex):
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:1313:        :param samRunIndex:
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:1318:        assert isinstance(samRunIndex, int)
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:1331:                can_run_number = can_run_numbers[samRunIndex]
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:1339:                                samRunIndex,
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:1347:            can_run_numbers, samRunIndex)
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:1379:    def _process_vanadium_runs(self, van_run_number_list, samRunIndex, **dummy_focuspos):
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:1382:        Requirements: if more than 1 run in given run number list, then samRunIndex must be given.
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:1386:        :param samRunIndex: sample run index
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:1394:            assert isinstance(samRunIndex, int)
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:1395:            van_run_number = van_run_number_list[samRunIndex]
./PythonInterface/plugins/algorithms/SNSPowderReduction.py:1473:                    van_bkgd_run_number = van_bkgd_run_number_list[samRunIndex]
./DataObjects/test/MDBoxIteratorTest.h:286:      TS_ASSERT_DELTA(it->getInnerRunIndex(i), 0, 0);
./DataObjects/test/MDBoxTest.h:220:    TS_ASSERT_EQUALS(b.getEvents()[2].getRunIndex(), 10);
./DataObjects/test/MDHistoWorkspaceIteratorTest.h:83:      TS_ASSERT_EQUALS(it->getInnerRunIndex(0), 0);
./DataObjects/test/MDBoxBaseTest.h:110:  void calculateCentroid(coord_t * /*centroid*/, const int /*runindex*/) const override{};
./DataObjects/test/MDEventTest.h:29:    TS_ASSERT_EQUALS(a.getRunIndex(), 0);
./DataObjects/test/MDEventTest.h:37:    TS_ASSERT_EQUALS(b.getRunIndex(), 0);
./DataObjects/test/MDEventTest.h:54:    TS_ASSERT_EQUALS(b.getRunIndex(), 123);
./DataObjects/test/MDEventTest.h:68:    TS_ASSERT_EQUALS(b.getRunIndex(), 123);
./DataObjects/test/MDEventTest.h:82:    TS_ASSERT_EQUALS(a.getRunIndex(), 123);
./DataObjects/test/MDEventTest.h:157:      events[i].setRunIndex(uint16_t(i / 10));
./DataObjects/test/MDEventTest.h:181:      TS_ASSERT_EQUALS(events[i].getRunIndex(), uint16_t(data[ncols * i + 2]));
./DataObjects/test/MDEventTest.h:199:      TS_ASSERT_EQUALS(events[i].getRunIndex(), transfEvents[i].getRunIndex());
./DataObjects/test/MDEventTest.h:320:      events[i].setRunIndex(uint16_t(i / 10));
./DataObjects/src/MDHistoWorkspaceIterator.cpp:425:uint16_t MDHistoWorkspaceIterator::getInnerRunIndex(size_t /*index*/) const {
./DataObjects/inc/MantidDataObjects/MDBox.h:165:  void calculateCentroid(coord_t *centroid, const int runindex) const override;
./DataObjects/inc/MantidDataObjects/MDBoxIterator.h:70:  uint16_t getInnerRunIndex(size_t index) const override;
./DataObjects/inc/MantidDataObjects/MDGridBox.h:183:  void calculateCentroid(coord_t * /*centroid*/, const int /*runindex*/) const override {
./DataObjects/inc/MantidDataObjects/MDHistoWorkspaceIterator.h:86:  uint16_t getInnerRunIndex(size_t index) const override;
./DataObjects/inc/MantidDataObjects/MDLeanEvent.h:312:  uint16_t getRunIndex() const { return 0; }
./DataObjects/inc/MantidDataObjects/MDEvent.h:176:  uint16_t getRunIndex() const { return expInfoIndex; }
./DataObjects/inc/MantidDataObjects/MDEvent.h:180:  void setRunIndex(uint16_t index) { expInfoIndex = index; }
./DataObjects/inc/MantidDataObjects/MDEventInserter.h:50:  @param runindex : run index (index into the vector of ExperimentInfo)
./DataObjects/inc/MantidDataObjects/MDEventInserter.h:56:  void insertMDEvent(float signal, float errorSQ, uint16_t runindex, uint16_t goniometerIndex, int32_t detectno,
./DataObjects/inc/MantidDataObjects/MDEventInserter.h:60:    insertMDEvent(signal, errorSQ, runindex, goniometerIndex, detectno, coords,
./DataObjects/inc/MantidDataObjects/MDEventInserter.h:83:  @param runindex : run index
./DataObjects/inc/MantidDataObjects/MDEventInserter.h:89:  void insertMDEvent(float signal, float errorSQ, uint16_t runindex, uint16_t goniometerIndex, int32_t detectno,
./DataObjects/inc/MantidDataObjects/MDEventInserter.h:91:    m_ws->addEvent(MDEventType(signal, errorSQ, runindex, goniometerIndex, detectno, coords));
./DataObjects/inc/MantidDataObjects/MDBoxIterator.tcc:282:TMDE(uint16_t MDBoxIterator)::getInnerRunIndex(size_t index) const {
./DataObjects/inc/MantidDataObjects/MDBoxIterator.tcc:284:  return (*m_events)[index].getRunIndex();
./DataObjects/inc/MantidDataObjects/MDBox.tcc:431: * @param runindex [in] :: run index used to filter the events.
./DataObjects/inc/MantidDataObjects/MDBox.tcc:433:TMDE(void MDBox)::calculateCentroid(coord_t *centroid, const int runindex) const {
./DataObjects/inc/MantidDataObjects/MDBox.tcc:444:    if (Evnt.getRunIndex() == runindex) {
./Crystal/test/PeakBackgroundTest.h:60:  MOCK_CONST_METHOD1(getInnerRunIndex, uint16_t(size_t index));
