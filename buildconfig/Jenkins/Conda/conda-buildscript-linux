#!/bin/bash -ex

# This script expects to be in a POSIX environment, it will run our CI workflow on a POSIX environment depending
# on the flags and args passed. This script will always compile the code, and run the unit tests if a change was
# made to something other than a .rst file.
#
# Script usage:
# buildscript <path-to-workspace> <cmake-preset-name> [options]
#
# Example command to run a PR build on ubuntu:
# buildscript /jenkins/workspace_dir/ linux-ci --enable-unittests --enable-coverage --enable-docs
#
# Expected args:
#   1. WORKSPACE: path to the workspace/source code that this should run inside
#   2. CMAKE_PRESET: the CMake preset that should be ran to generate the cmake files for this CI job
#
# Possible flags:
#   --enable-systemtests: Stops the system tests from being compiled or ran
#   --enable-package: Stops a package being produced
#   --enable-coverage: Stops the running of coverage for the test suite
#   --enable-docs: Stops the docs from being built
#   --enable-dev-docs: Stops the developer docs from being built
#   --clean-build: Clears the build folder and builds from scratch
#   --clean-external-projects: Clear the external projects from the build folder

# SCRIPT_DIR discovery from https://stackoverflow.com/a/9107028 by https://stackoverflow.com/users/1184238/andrew-norrie
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKSPACE=$1
CMAKE_PRESET=$2
EXPECTED_MAMBAFORGE_PATH=$WORKSPACE/mambaforge # Install into the WORKSPACE_DIR
EXPECTED_CONDA_PATH=$EXPECTED_MAMBAFORGE_PATH/bin/conda
CONDA_ENV_NAME="mantid-developer"
CPU_COUNT="$(grep -c ^processor /proc/cpuinfo)" # Not physical but logical cores, includes hyper threaded.
XVFB_SERVER_NUM=101
BUILD_DIR=$WORKSPACE/build

ENABLE_SYSTEM_TESTS=false
ENABLE_PACKAGE=false
ENABLE_COVERAGE=false
ENABLE_DOCS=false
ENABLE_DEV_DOCS=false
CLEAN_BUILD=false
CLEAN_EXTERNAL_PROJECTS=false

# Handle flag inputs
while getopts ":a:" opt; do
  case $opt in
    --enable-systemtests)
        ENABLE_SYSTEM_TESTS=true
        ;;
    --enable-package)
        ENABLE_PACKAGE=true
        ;;
    --enable-coverage)
        ENABLE_COVERAGE=true
        ;;
    --enable-docs)
        ENABLE_DOCS=true
        ;;
    --enable-dev-docs)
        ENABLE_DEV_DOCS=true
        ;;
    --clean-build)
        CLEAN_BUILD=true
        ;;
    --clean-external-projects)
        CLEAN_EXTERNAL_PROJECTS=true
        ;;
  esac
done


# Setup Mambaforge
$SCRIPT_DIR/download-and-install-mambaforge $EXPECTED_MAMBAFORGE_PATH $EXPECTED_CONDA_PATH

# Setup Conda environment
$SCRIPT_DIR/setup-conda-env $WORKSPACE $EXPECTED_MAMBAFORGE_PATH $EXPECTED_CONDA_PATH

# Activate Conda environment
. $HOME/mambaforge/etc/profile.d/conda.sh
conda activate $CONDA_ENV_NAME

# Clean up build folder
if [[ $CLEAN_BUILD  == true ]]; then
    rm -rf $BUILD_DIR
fi

mkdir -p $BUILD_DIR

rm -rf ${BUILD_DIR}/bin ${BUILD_DIR}/ExternalData ${BUILD_DIR}/Testing
find ${BUILD_DIR} \( -name 'TEST-*.xml' -o -name 'Test.xml' \) -delete

if [[ ${CLEAN_EXTERNAL_PROJECTS} == true ]]; then
    rm -rf $BUILD_DIR/eigen-*
    rm -rf $BUILD_DIR/googletest-*
fi

# Clean up artifacts from previous builds
rm -f -- *.dmg *.rpm *.deb *.tar.gz *.tar.xz

# Run the script that handles the actual building
$SCRIPT_DIR/build $WORKSPACE $ENABLE_SYSTEM_TESTS $CMAKE_PRESET

# Clean up prior to testing
# Prevent race conditions when creating the user config directory
userconfig_dir=$HOME/.mantid
rm -fr $userconfig_dir

# Remove GUI qsettings files
rm -f ~/.config/mantidproject/mantidworkbench.ini

mkdir -p $userconfig_dir
# use a fixed number of openmp threads to avoid overloading the system
echo MultiThreaded.MaxCores=2 > $userconfig_dir/Mantid.user.properties

# Run unit and system tests (IF WANTED)
$SCRIPT_DIR/run-tests $WORKSPACE
