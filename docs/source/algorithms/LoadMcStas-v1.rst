.. algorithm::

.. summary::

.. alias::

.. properties::

Description
-----------

Reads a McStas Nexus file into a Mantid WorkspaceGroup with a 
user-supplied name. Data generated by McStas monitor components are 
stored in workspaces of type Workspace2D and/or EventWorkspace.

For information about how to create McStas outputs that can 
readily be read by this loader, see `here <https://github.com/McStasMcXtrace/McCode/wiki/McStas-and-Mantid>`_.
For more information about McStas, and combined McStas and Mantid analyses see references below.

The ErrorBarsSetTo1 property applies to event data, but not to histogram data.

LoadMcStas replaces LoadMcStasEventNexus. LoadMcStas can be used for 
reading McStas 2.1 histogram and event data. 
:ref:`algm-LoadMcStasNexus` can be used 
for reading McStas 2.0 histogram data. 

Information about the required structure of the input Nexus file
################################################################

The input file must have an 
``/entry1/simulation/name`` item whose value is ``"mccode"``.

The output workspace will contain one workspace for each group of
class ``NXdata`` in the input NeXus file, which is not of name ``"content_nxs"`` 
found in a group of class ``NXDetector`` of name ``"Data"``.
The name of the workspace is the same as the name of the group, 
but with with the name of the outputworkspace, as specified in the algorithm properties,
added to the end.

+----------------------------------+------------------------------------------+---------------------------------------+
| Description of Data              | Found in Nexus file (within 'run')       | Placed in Workspace (Workspace2D)     |
|                                  |                                          | or output                             |
+==================================+==========================================+=======================================+
| All data                         | Group of class ``NXDetector``            | See below                             |
|                                  | of name ``"data"``                       |                                       |
+----------------------------------+------------------------------------------+---------------------------------------+
| Generic group including either   | each group of class ``NXdata`` in        | one workspace each                    |
| event or histrogram data         | ``"data"``, henceforth referred to as    |                                       |
|                                  | [DATA]                                   |                                       |
+----------------------------------+------------------------------------------+---------------------------------------+
| Event data                       | item in a [DATA] with a ``long_name``    | event data                            |
|                                  | attribute containing ``"Neutron_ID"``    |                                       |
|                                  | and name ``"events"``                    |                                       |
+----------------------------------+------------------------------------------+---------------------------------------+
| Histrogram data                  | items in a [DATA] with a ``long_name``   | histogram data                        |
|                                  | attribute **not** containing             |                                       |
|                                  | ``"Neutron_ID"``                         |                                       |
+----------------------------------+------------------------------------------+---------------------------------------+
| Instrument                       | ``/instrument``                          | loaded into workspace, only if        |
|                                  |                                          | events are loaded                     | 
+----------------------------------+------------------------------------------+---------------------------------------+
| Instrument definition            | ``/instrument/instrument_xml/data``      | loaded into workspace, only if        |
|                                  | is needed for events to be loaded        | events are loaded                     | 
+----------------------------------+------------------------------------------+---------------------------------------+

The event data of the McStas file occurs in a NeXus table with six columns:

1. Weight
2. X coordinate
3. Y coordinate
4. Number of previous events
5. Detector ID
6. Time


References
##########

For more information about McStas and its general usage for simulating neutron 
scattering instruments and experiments visit the `McStas homepage <http://www.mcstas.org>`_ .

For examples of how combined McStas and Mantid analyses can help 
instrument simulation and data treatment/analysis tasks see Nielsen., T.R. et al., McStas
and Mantid integration, Journal of Neutron Research, vol. 18, no. 2-3, pp. 61-77, 2015
`DOI: 10.3233/JNR-160026 <http://dx.doi.org/10.3233/JNR-160026>`_ 
[`arXiv <http://arxiv.org/abs/1607.02498>`_].

Usage
-----

.. include:: ../usagedata-note.txt

**Example - Load McStas data containing both event and histogram data:**

.. testcode:: ExLoadMcStas

   # Load the data into tuple
   ws = LoadMcStas('mcstas_event_hist.h5')

   # workspace group is first entry in tuple
   group = ws[0]
   print("Number of entries in group: {}".format(group.getNumberOfEntries()))

   eventData = ws[1]
   print("Number of histograms in event data: {}".format(eventData.getNumberHistograms()))
   print("Name of event data: {}".format(eventData.getName()))

   someHistogramData = ws[2]
   print("Number of histograms in hist data: {}".format(someHistogramData.getNumberHistograms()))
   print("Name of hist data: {}".format(someHistogramData.getName()))


Output:

.. testoutput:: ExLoadMcStas

   Number of entries in group: 7
   Number of histograms in event data: 8192
   Name of event data: EventData_ws
   Number of histograms in hist data: 1
   Name of hist data: Edet.dat_ws


.. testcode:: CheckEqualScattering

   # Load the data into tuple
   ws = LoadMcStas('mcstas_event_hist.h5')

   # Calculate total of all scattering
   all_scattering_event_ws = ws[1]
   total_all = 0
   for i in range(all_scattering_event_ws.getNumberHistograms()):
    total_all += all_scattering_event_ws.readY(i)[0]
   print("The sum of all scattering spectra: {0:.4e}".format(total_all))

   # Calculate total of single scatter
   single_scatter_event_ws = ws[5]
   total_single = 0
   for i in range(single_scatter_event_ws.getNumberHistograms()):
    total_single += single_scatter_event_ws.readY(i)[0]
   print("The sum of all single scattering spectra: {0:.4e}".format(total_single))

   # Calculate total of multiple scatter
   multiple_scatter_event_ws = ws[6]
   total_multiple = 0
   for i in range(multiple_scatter_event_ws.getNumberHistograms()):
    total_multiple += multiple_scatter_event_ws.readY(i)[0]
   print("The sum of all multiple scattering spectra: {0:.4e}".format(total_multiple))

   # Check equality
   sum_of_scattering = total_multiple + total_single
   # This is equal to the sum of all scattering spectra (ws[1])
   print("Sum of single and multiple scattering workspaces: {0:.4e}".format(total_single + total_multiple))

Output:

.. testoutput:: CheckEqualScattering

   The sum of all scattering spectra: 1.071638e-17
   The sum of all single scattering spectra: 1.071413e-17
   The sum of all multiple scattering spectra: 2.245576e-21
   Sum of single and multiple scattering workspaces: 1.071638e-17

.. categories::

.. sourcelink::
